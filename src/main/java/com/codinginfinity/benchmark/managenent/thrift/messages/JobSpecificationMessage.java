/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.codinginfinity.benchmark.management.thrift.messages;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@Generated(value = "Autogenerated by Thrift Compiler (1.0.0-dev)", date = "2016-08-10")
public class JobSpecificationMessage implements org.apache.thrift.TBase<JobSpecificationMessage, JobSpecificationMessage._Fields>, java.io.Serializable, Cloneable, Comparable<JobSpecificationMessage> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("JobSpecificationMessage");

  private static final org.apache.thrift.protocol.TField EXPERIMENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("experimentId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField JOB_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("jobId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField LANGUAGE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("languageType", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField MEASUREMENT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("measurementType", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField DATASET_FIELD_DESC = new org.apache.thrift.protocol.TField("dataset", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField ALGORITHM_FIELD_DESC = new org.apache.thrift.protocol.TField("algorithm", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField TIMEOUT_FIELD_DESC = new org.apache.thrift.protocol.TField("timeout", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField PROBE_INTERVAL_FIELD_DESC = new org.apache.thrift.protocol.TField("probeInterval", org.apache.thrift.protocol.TType.I32, (short)8);

  private static final SchemeFactory STANDARD_SCHEME_FACTORY = new JobSpecificationMessageStandardSchemeFactory();
  private static final SchemeFactory TUPLE_SCHEME_FACTORY = new JobSpecificationMessageTupleSchemeFactory();

  public int experimentId; // required
  public int jobId; // required
  /**
   * 
   * @see LanguageType
   */
  public LanguageType languageType; // required
  /**
   * 
   * @see MeasurementType
   */
  public MeasurementType measurementType; // required
  public ByteBuffer dataset; // required
  public ByteBuffer algorithm; // required
  public int timeout; // required
  public int probeInterval; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    EXPERIMENT_ID((short)1, "experimentId"),
    JOB_ID((short)2, "jobId"),
    /**
     * 
     * @see LanguageType
     */
    LANGUAGE_TYPE((short)3, "languageType"),
    /**
     * 
     * @see MeasurementType
     */
    MEASUREMENT_TYPE((short)4, "measurementType"),
    DATASET((short)5, "dataset"),
    ALGORITHM((short)6, "algorithm"),
    TIMEOUT((short)7, "timeout"),
    PROBE_INTERVAL((short)8, "probeInterval");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // EXPERIMENT_ID
          return EXPERIMENT_ID;
        case 2: // JOB_ID
          return JOB_ID;
        case 3: // LANGUAGE_TYPE
          return LANGUAGE_TYPE;
        case 4: // MEASUREMENT_TYPE
          return MEASUREMENT_TYPE;
        case 5: // DATASET
          return DATASET;
        case 6: // ALGORITHM
          return ALGORITHM;
        case 7: // TIMEOUT
          return TIMEOUT;
        case 8: // PROBE_INTERVAL
          return PROBE_INTERVAL;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __EXPERIMENTID_ISSET_ID = 0;
  private static final int __JOBID_ISSET_ID = 1;
  private static final int __TIMEOUT_ISSET_ID = 2;
  private static final int __PROBEINTERVAL_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.EXPERIMENT_ID, new org.apache.thrift.meta_data.FieldMetaData("experimentId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.JOB_ID, new org.apache.thrift.meta_data.FieldMetaData("jobId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LANGUAGE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("languageType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, LanguageType.class)));
    tmpMap.put(_Fields.MEASUREMENT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("measurementType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, MeasurementType.class)));
    tmpMap.put(_Fields.DATASET, new org.apache.thrift.meta_data.FieldMetaData("dataset", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.ALGORITHM, new org.apache.thrift.meta_data.FieldMetaData("algorithm", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.TIMEOUT, new org.apache.thrift.meta_data.FieldMetaData("timeout", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PROBE_INTERVAL, new org.apache.thrift.meta_data.FieldMetaData("probeInterval", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(JobSpecificationMessage.class, metaDataMap);
  }

  public JobSpecificationMessage() {
  }

  public JobSpecificationMessage(
    int experimentId,
    int jobId,
    LanguageType languageType,
    MeasurementType measurementType,
    ByteBuffer dataset,
    ByteBuffer algorithm,
    int timeout,
    int probeInterval)
  {
    this();
    this.experimentId = experimentId;
    setExperimentIdIsSet(true);
    this.jobId = jobId;
    setJobIdIsSet(true);
    this.languageType = languageType;
    this.measurementType = measurementType;
    this.dataset = org.apache.thrift.TBaseHelper.copyBinary(dataset);
    this.algorithm = org.apache.thrift.TBaseHelper.copyBinary(algorithm);
    this.timeout = timeout;
    setTimeoutIsSet(true);
    this.probeInterval = probeInterval;
    setProbeIntervalIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public JobSpecificationMessage(JobSpecificationMessage other) {
    __isset_bitfield = other.__isset_bitfield;
    this.experimentId = other.experimentId;
    this.jobId = other.jobId;
    if (other.isSetLanguageType()) {
      this.languageType = other.languageType;
    }
    if (other.isSetMeasurementType()) {
      this.measurementType = other.measurementType;
    }
    if (other.isSetDataset()) {
      this.dataset = org.apache.thrift.TBaseHelper.copyBinary(other.dataset);
    }
    if (other.isSetAlgorithm()) {
      this.algorithm = org.apache.thrift.TBaseHelper.copyBinary(other.algorithm);
    }
    this.timeout = other.timeout;
    this.probeInterval = other.probeInterval;
  }

  public JobSpecificationMessage deepCopy() {
    return new JobSpecificationMessage(this);
  }

  @Override
  public void clear() {
    setExperimentIdIsSet(false);
    this.experimentId = 0;
    setJobIdIsSet(false);
    this.jobId = 0;
    this.languageType = null;
    this.measurementType = null;
    this.dataset = null;
    this.algorithm = null;
    setTimeoutIsSet(false);
    this.timeout = 0;
    setProbeIntervalIsSet(false);
    this.probeInterval = 0;
  }

  public int getExperimentId() {
    return this.experimentId;
  }

  public JobSpecificationMessage setExperimentId(int experimentId) {
    this.experimentId = experimentId;
    setExperimentIdIsSet(true);
    return this;
  }

  public void unsetExperimentId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EXPERIMENTID_ISSET_ID);
  }

  /** Returns true if field experimentId is set (has been assigned a value) and false otherwise */
  public boolean isSetExperimentId() {
    return EncodingUtils.testBit(__isset_bitfield, __EXPERIMENTID_ISSET_ID);
  }

  public void setExperimentIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EXPERIMENTID_ISSET_ID, value);
  }

  public int getJobId() {
    return this.jobId;
  }

  public JobSpecificationMessage setJobId(int jobId) {
    this.jobId = jobId;
    setJobIdIsSet(true);
    return this;
  }

  public void unsetJobId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __JOBID_ISSET_ID);
  }

  /** Returns true if field jobId is set (has been assigned a value) and false otherwise */
  public boolean isSetJobId() {
    return EncodingUtils.testBit(__isset_bitfield, __JOBID_ISSET_ID);
  }

  public void setJobIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __JOBID_ISSET_ID, value);
  }

  /**
   * 
   * @see LanguageType
   */
  public LanguageType getLanguageType() {
    return this.languageType;
  }

  /**
   * 
   * @see LanguageType
   */
  public JobSpecificationMessage setLanguageType(LanguageType languageType) {
    this.languageType = languageType;
    return this;
  }

  public void unsetLanguageType() {
    this.languageType = null;
  }

  /** Returns true if field languageType is set (has been assigned a value) and false otherwise */
  public boolean isSetLanguageType() {
    return this.languageType != null;
  }

  public void setLanguageTypeIsSet(boolean value) {
    if (!value) {
      this.languageType = null;
    }
  }

  /**
   * 
   * @see MeasurementType
   */
  public MeasurementType getMeasurementType() {
    return this.measurementType;
  }

  /**
   * 
   * @see MeasurementType
   */
  public JobSpecificationMessage setMeasurementType(MeasurementType measurementType) {
    this.measurementType = measurementType;
    return this;
  }

  public void unsetMeasurementType() {
    this.measurementType = null;
  }

  /** Returns true if field measurementType is set (has been assigned a value) and false otherwise */
  public boolean isSetMeasurementType() {
    return this.measurementType != null;
  }

  public void setMeasurementTypeIsSet(boolean value) {
    if (!value) {
      this.measurementType = null;
    }
  }

  public byte[] getDataset() {
    setDataset(org.apache.thrift.TBaseHelper.rightSize(dataset));
    return dataset == null ? null : dataset.array();
  }

  public ByteBuffer bufferForDataset() {
    return org.apache.thrift.TBaseHelper.copyBinary(dataset);
  }

  public JobSpecificationMessage setDataset(byte[] dataset) {
    this.dataset = dataset == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(dataset, dataset.length));
    return this;
  }

  public JobSpecificationMessage setDataset(ByteBuffer dataset) {
    this.dataset = org.apache.thrift.TBaseHelper.copyBinary(dataset);
    return this;
  }

  public void unsetDataset() {
    this.dataset = null;
  }

  /** Returns true if field dataset is set (has been assigned a value) and false otherwise */
  public boolean isSetDataset() {
    return this.dataset != null;
  }

  public void setDatasetIsSet(boolean value) {
    if (!value) {
      this.dataset = null;
    }
  }

  public byte[] getAlgorithm() {
    setAlgorithm(org.apache.thrift.TBaseHelper.rightSize(algorithm));
    return algorithm == null ? null : algorithm.array();
  }

  public ByteBuffer bufferForAlgorithm() {
    return org.apache.thrift.TBaseHelper.copyBinary(algorithm);
  }

  public JobSpecificationMessage setAlgorithm(byte[] algorithm) {
    this.algorithm = algorithm == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(algorithm, algorithm.length));
    return this;
  }

  public JobSpecificationMessage setAlgorithm(ByteBuffer algorithm) {
    this.algorithm = org.apache.thrift.TBaseHelper.copyBinary(algorithm);
    return this;
  }

  public void unsetAlgorithm() {
    this.algorithm = null;
  }

  /** Returns true if field algorithm is set (has been assigned a value) and false otherwise */
  public boolean isSetAlgorithm() {
    return this.algorithm != null;
  }

  public void setAlgorithmIsSet(boolean value) {
    if (!value) {
      this.algorithm = null;
    }
  }

  public int getTimeout() {
    return this.timeout;
  }

  public JobSpecificationMessage setTimeout(int timeout) {
    this.timeout = timeout;
    setTimeoutIsSet(true);
    return this;
  }

  public void unsetTimeout() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TIMEOUT_ISSET_ID);
  }

  /** Returns true if field timeout is set (has been assigned a value) and false otherwise */
  public boolean isSetTimeout() {
    return EncodingUtils.testBit(__isset_bitfield, __TIMEOUT_ISSET_ID);
  }

  public void setTimeoutIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TIMEOUT_ISSET_ID, value);
  }

  public int getProbeInterval() {
    return this.probeInterval;
  }

  public JobSpecificationMessage setProbeInterval(int probeInterval) {
    this.probeInterval = probeInterval;
    setProbeIntervalIsSet(true);
    return this;
  }

  public void unsetProbeInterval() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROBEINTERVAL_ISSET_ID);
  }

  /** Returns true if field probeInterval is set (has been assigned a value) and false otherwise */
  public boolean isSetProbeInterval() {
    return EncodingUtils.testBit(__isset_bitfield, __PROBEINTERVAL_ISSET_ID);
  }

  public void setProbeIntervalIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROBEINTERVAL_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case EXPERIMENT_ID:
      if (value == null) {
        unsetExperimentId();
      } else {
        setExperimentId((Integer)value);
      }
      break;

    case JOB_ID:
      if (value == null) {
        unsetJobId();
      } else {
        setJobId((Integer)value);
      }
      break;

    case LANGUAGE_TYPE:
      if (value == null) {
        unsetLanguageType();
      } else {
        setLanguageType((LanguageType)value);
      }
      break;

    case MEASUREMENT_TYPE:
      if (value == null) {
        unsetMeasurementType();
      } else {
        setMeasurementType((MeasurementType)value);
      }
      break;

    case DATASET:
      if (value == null) {
        unsetDataset();
      } else {
        if (value instanceof byte[]) {
          setDataset((byte[])value);
        } else {
          setDataset((ByteBuffer)value);
        }
      }
      break;

    case ALGORITHM:
      if (value == null) {
        unsetAlgorithm();
      } else {
        if (value instanceof byte[]) {
          setAlgorithm((byte[])value);
        } else {
          setAlgorithm((ByteBuffer)value);
        }
      }
      break;

    case TIMEOUT:
      if (value == null) {
        unsetTimeout();
      } else {
        setTimeout((Integer)value);
      }
      break;

    case PROBE_INTERVAL:
      if (value == null) {
        unsetProbeInterval();
      } else {
        setProbeInterval((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case EXPERIMENT_ID:
      return getExperimentId();

    case JOB_ID:
      return getJobId();

    case LANGUAGE_TYPE:
      return getLanguageType();

    case MEASUREMENT_TYPE:
      return getMeasurementType();

    case DATASET:
      return getDataset();

    case ALGORITHM:
      return getAlgorithm();

    case TIMEOUT:
      return getTimeout();

    case PROBE_INTERVAL:
      return getProbeInterval();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case EXPERIMENT_ID:
      return isSetExperimentId();
    case JOB_ID:
      return isSetJobId();
    case LANGUAGE_TYPE:
      return isSetLanguageType();
    case MEASUREMENT_TYPE:
      return isSetMeasurementType();
    case DATASET:
      return isSetDataset();
    case ALGORITHM:
      return isSetAlgorithm();
    case TIMEOUT:
      return isSetTimeout();
    case PROBE_INTERVAL:
      return isSetProbeInterval();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof JobSpecificationMessage)
      return this.equals((JobSpecificationMessage)that);
    return false;
  }

  public boolean equals(JobSpecificationMessage that) {
    if (that == null)
      return false;

    boolean this_present_experimentId = true;
    boolean that_present_experimentId = true;
    if (this_present_experimentId || that_present_experimentId) {
      if (!(this_present_experimentId && that_present_experimentId))
        return false;
      if (this.experimentId != that.experimentId)
        return false;
    }

    boolean this_present_jobId = true;
    boolean that_present_jobId = true;
    if (this_present_jobId || that_present_jobId) {
      if (!(this_present_jobId && that_present_jobId))
        return false;
      if (this.jobId != that.jobId)
        return false;
    }

    boolean this_present_languageType = true && this.isSetLanguageType();
    boolean that_present_languageType = true && that.isSetLanguageType();
    if (this_present_languageType || that_present_languageType) {
      if (!(this_present_languageType && that_present_languageType))
        return false;
      if (!this.languageType.equals(that.languageType))
        return false;
    }

    boolean this_present_measurementType = true && this.isSetMeasurementType();
    boolean that_present_measurementType = true && that.isSetMeasurementType();
    if (this_present_measurementType || that_present_measurementType) {
      if (!(this_present_measurementType && that_present_measurementType))
        return false;
      if (!this.measurementType.equals(that.measurementType))
        return false;
    }

    boolean this_present_dataset = true && this.isSetDataset();
    boolean that_present_dataset = true && that.isSetDataset();
    if (this_present_dataset || that_present_dataset) {
      if (!(this_present_dataset && that_present_dataset))
        return false;
      if (!this.dataset.equals(that.dataset))
        return false;
    }

    boolean this_present_algorithm = true && this.isSetAlgorithm();
    boolean that_present_algorithm = true && that.isSetAlgorithm();
    if (this_present_algorithm || that_present_algorithm) {
      if (!(this_present_algorithm && that_present_algorithm))
        return false;
      if (!this.algorithm.equals(that.algorithm))
        return false;
    }

    boolean this_present_timeout = true;
    boolean that_present_timeout = true;
    if (this_present_timeout || that_present_timeout) {
      if (!(this_present_timeout && that_present_timeout))
        return false;
      if (this.timeout != that.timeout)
        return false;
    }

    boolean this_present_probeInterval = true;
    boolean that_present_probeInterval = true;
    if (this_present_probeInterval || that_present_probeInterval) {
      if (!(this_present_probeInterval && that_present_probeInterval))
        return false;
      if (this.probeInterval != that.probeInterval)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + experimentId;

    hashCode = hashCode * 8191 + jobId;

    hashCode = hashCode * 8191 + ((isSetLanguageType()) ? 131071 : 524287);
    if (isSetLanguageType())
      hashCode = hashCode * 8191 + languageType.getValue();

    hashCode = hashCode * 8191 + ((isSetMeasurementType()) ? 131071 : 524287);
    if (isSetMeasurementType())
      hashCode = hashCode * 8191 + measurementType.getValue();

    hashCode = hashCode * 8191 + ((isSetDataset()) ? 131071 : 524287);
    if (isSetDataset())
      hashCode = hashCode * 8191 + dataset.hashCode();

    hashCode = hashCode * 8191 + ((isSetAlgorithm()) ? 131071 : 524287);
    if (isSetAlgorithm())
      hashCode = hashCode * 8191 + algorithm.hashCode();

    hashCode = hashCode * 8191 + timeout;

    hashCode = hashCode * 8191 + probeInterval;

    return hashCode;
  }

  @Override
  public int compareTo(JobSpecificationMessage other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetExperimentId()).compareTo(other.isSetExperimentId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExperimentId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.experimentId, other.experimentId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetJobId()).compareTo(other.isSetJobId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJobId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jobId, other.jobId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLanguageType()).compareTo(other.isSetLanguageType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLanguageType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.languageType, other.languageType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMeasurementType()).compareTo(other.isSetMeasurementType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMeasurementType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.measurementType, other.measurementType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDataset()).compareTo(other.isSetDataset());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDataset()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dataset, other.dataset);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAlgorithm()).compareTo(other.isSetAlgorithm());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAlgorithm()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.algorithm, other.algorithm);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTimeout()).compareTo(other.isSetTimeout());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimeout()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timeout, other.timeout);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProbeInterval()).compareTo(other.isSetProbeInterval());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProbeInterval()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.probeInterval, other.probeInterval);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("JobSpecificationMessage(");
    boolean first = true;

    sb.append("experimentId:");
    sb.append(this.experimentId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("jobId:");
    sb.append(this.jobId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("languageType:");
    if (this.languageType == null) {
      sb.append("null");
    } else {
      sb.append(this.languageType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("measurementType:");
    if (this.measurementType == null) {
      sb.append("null");
    } else {
      sb.append(this.measurementType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("dataset:");
    if (this.dataset == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.dataset, sb);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("algorithm:");
    if (this.algorithm == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.algorithm, sb);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("timeout:");
    sb.append(this.timeout);
    first = false;
    if (!first) sb.append(", ");
    sb.append("probeInterval:");
    sb.append(this.probeInterval);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class JobSpecificationMessageStandardSchemeFactory implements SchemeFactory {
    public JobSpecificationMessageStandardScheme getScheme() {
      return new JobSpecificationMessageStandardScheme();
    }
  }

  private static class JobSpecificationMessageStandardScheme extends StandardScheme<JobSpecificationMessage> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, JobSpecificationMessage struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // EXPERIMENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.experimentId = iprot.readI32();
              struct.setExperimentIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // JOB_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.jobId = iprot.readI32();
              struct.setJobIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // LANGUAGE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.languageType = com.codinginfinity.benchmark.management.thrift.messages.LanguageType.findByValue(iprot.readI32());
              struct.setLanguageTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // MEASUREMENT_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.measurementType = com.codinginfinity.benchmark.management.thrift.messages.MeasurementType.findByValue(iprot.readI32());
              struct.setMeasurementTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // DATASET
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.dataset = iprot.readBinary();
              struct.setDatasetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // ALGORITHM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.algorithm = iprot.readBinary();
              struct.setAlgorithmIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // TIMEOUT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.timeout = iprot.readI32();
              struct.setTimeoutIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // PROBE_INTERVAL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.probeInterval = iprot.readI32();
              struct.setProbeIntervalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, JobSpecificationMessage struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(EXPERIMENT_ID_FIELD_DESC);
      oprot.writeI32(struct.experimentId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(JOB_ID_FIELD_DESC);
      oprot.writeI32(struct.jobId);
      oprot.writeFieldEnd();
      if (struct.languageType != null) {
        oprot.writeFieldBegin(LANGUAGE_TYPE_FIELD_DESC);
        oprot.writeI32(struct.languageType.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.measurementType != null) {
        oprot.writeFieldBegin(MEASUREMENT_TYPE_FIELD_DESC);
        oprot.writeI32(struct.measurementType.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.dataset != null) {
        oprot.writeFieldBegin(DATASET_FIELD_DESC);
        oprot.writeBinary(struct.dataset);
        oprot.writeFieldEnd();
      }
      if (struct.algorithm != null) {
        oprot.writeFieldBegin(ALGORITHM_FIELD_DESC);
        oprot.writeBinary(struct.algorithm);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(TIMEOUT_FIELD_DESC);
      oprot.writeI32(struct.timeout);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PROBE_INTERVAL_FIELD_DESC);
      oprot.writeI32(struct.probeInterval);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class JobSpecificationMessageTupleSchemeFactory implements SchemeFactory {
    public JobSpecificationMessageTupleScheme getScheme() {
      return new JobSpecificationMessageTupleScheme();
    }
  }

  private static class JobSpecificationMessageTupleScheme extends TupleScheme<JobSpecificationMessage> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, JobSpecificationMessage struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetExperimentId()) {
        optionals.set(0);
      }
      if (struct.isSetJobId()) {
        optionals.set(1);
      }
      if (struct.isSetLanguageType()) {
        optionals.set(2);
      }
      if (struct.isSetMeasurementType()) {
        optionals.set(3);
      }
      if (struct.isSetDataset()) {
        optionals.set(4);
      }
      if (struct.isSetAlgorithm()) {
        optionals.set(5);
      }
      if (struct.isSetTimeout()) {
        optionals.set(6);
      }
      if (struct.isSetProbeInterval()) {
        optionals.set(7);
      }
      oprot.writeBitSet(optionals, 8);
      if (struct.isSetExperimentId()) {
        oprot.writeI32(struct.experimentId);
      }
      if (struct.isSetJobId()) {
        oprot.writeI32(struct.jobId);
      }
      if (struct.isSetLanguageType()) {
        oprot.writeI32(struct.languageType.getValue());
      }
      if (struct.isSetMeasurementType()) {
        oprot.writeI32(struct.measurementType.getValue());
      }
      if (struct.isSetDataset()) {
        oprot.writeBinary(struct.dataset);
      }
      if (struct.isSetAlgorithm()) {
        oprot.writeBinary(struct.algorithm);
      }
      if (struct.isSetTimeout()) {
        oprot.writeI32(struct.timeout);
      }
      if (struct.isSetProbeInterval()) {
        oprot.writeI32(struct.probeInterval);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, JobSpecificationMessage struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(8);
      if (incoming.get(0)) {
        struct.experimentId = iprot.readI32();
        struct.setExperimentIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.jobId = iprot.readI32();
        struct.setJobIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.languageType = com.codinginfinity.benchmark.management.thrift.messages.LanguageType.findByValue(iprot.readI32());
        struct.setLanguageTypeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.measurementType = com.codinginfinity.benchmark.management.thrift.messages.MeasurementType.findByValue(iprot.readI32());
        struct.setMeasurementTypeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.dataset = iprot.readBinary();
        struct.setDatasetIsSet(true);
      }
      if (incoming.get(5)) {
        struct.algorithm = iprot.readBinary();
        struct.setAlgorithmIsSet(true);
      }
      if (incoming.get(6)) {
        struct.timeout = iprot.readI32();
        struct.setTimeoutIsSet(true);
      }
      if (incoming.get(7)) {
        struct.probeInterval = iprot.readI32();
        struct.setProbeIntervalIsSet(true);
      }
    }
  }

  private static <S extends IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

